import json
from datetime import datetime
from flask import Flask, render_template, request
from google.cloud import datastore

app = Flask(__name__)
DS = datastore.Client()


def _add_event(event):
    """Adding the event to the database.

    :return: The unique ID of the new event.
    :param event:The event need to be added to the database.
    """
    entity = datastore.Entity(key=DS.key('Lab1-event'))
    entity.update({
        'name': event['name'],
        'date': event['date']
    })

    DS.put(entity)
    return entity.id


def _del_event(ID):
    """Delete an event according to its unique ID.

    :param ID:The unique id of target event
    """
    key = DS.key('Lab1-event', int(ID))
    DS.delete(key)


def get_all():
    """Getting all events stored in the database.
    Automatically delete past events.

    :return events: All events stored in the database.
    """
    query = DS.query(kind='Lab1-event')

    events = query.fetch()
    result = []
    for event in events:
        temp = dict(event)
        if temp['date'].timestamp() < datetime.now().timestamp():
            DS.delete(event.key)
            continue
        temp['ID'] = event.id
        result.append(temp)
    return result


def events2json(events):
    """Transfer event objects into JSON format.
    Generate string of date and ETA from the date property.
    Sort events by the ETA.

    :param events: Event objects need to be transfer.
    :return: Json format events.
    """
    events.sort(key=lambda event: event['date'])

    for event in events:
        timestamp = datetime.timestamp(event['date'])
        current = datetime.now().timestamp()
        event['date'] = event['date'].strftime("%m/%d/%Y")
        event['ETA'] = ''
        diff = int(timestamp - current)
        if diff < 86400:
            event['ETA'] = ':' + str(diff % 60) + ' left.'
            diff = diff // 60
            event['ETA'] = ':' + str(diff % 60) + event['ETA']
            diff = diff // 60
            event['ETA'] = str(diff) + event['ETA']
        else:
            event['ETA'] = str(diff // 86400) + ' days later.'
    return json.dumps(events)


@app.route('/')
def root():
    """Generate the web page.

    :return: Render template of web page.
    """
    return render_template('index.html')


@app.route('/events')
def send_events():
    """Select all events in database.
    Send them to the client.

    :return: All entities in database in json form.
    """
    events = events2json(get_all())
    return events


@app.route('/event', methods=['POST'])
def add_event():
    """Insert the event into database.
    If the event doesn't have year, insert the next occurrence of a matching date.

    :return: Status Information.
    """
    event = json.loads(request.data)
    if not event['name']:
        return json.dumps({'text': 'ERROR: Name cannot be empty!'})
    if not event['date']:
        return json.dumps({'text': 'ERROR: Date cannot be empty!'})
    date = event['date'].split('/')
    for i in range(len(date)):
        try:
            date[i] = int(date[i])
        except ValueError:
            return json.dumps({'text': 'ERROR: Date format is wrong!'})

    if len(date) != 2 and len(date) != 3:
        return json.dumps({'text': 'ERROR: Date format is wrong!'})
    if len(date) == 3:
        event['date'] = datetime(date[0], date[1], date[2])
    if len(date) == 2:
        temp = datetime(2020, date[0], date[1])
        event['date'] = temp if temp > datetime.now() else datetime(2021, date[0], date[1])

    try:
        new_ID = _add_event(event)
    except ValueError as err:
        return json.dumps({'text': 'ERROR: ' + str(err)})

    return json.dumps({'text': 'Success! The unique ID of the new event is ' + str(new_ID)})


@app.route('/event/<event_id>', methods=['DELETE'])
def del_event(event_id):
    """Delete an event according to the unique ID generated by datastore.

    :param event_id: The unique ID of target event.
    :return: Status Infomation.
    """
    try:
        _del_event(event_id)
    except ValueError as err:
        return json.dumps({'text': 'ERROR: ' + str(err)})

    return json.dumps({'text': 'Success! Target event has been deleted!'})


if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)
